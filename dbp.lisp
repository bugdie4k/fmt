(in-package #:fmt)

(defstruct regular-token form)

(defstruct newline conditional?)

(defstruct delim pattern)

(defstruct parsed prefix msg)

(defun maybe-lexem? (arg)
  (and (symbolp arg) (symbol-name arg)))

(defun parse-args (args &key upto)
  (labels ((%switch (lexem args)
             (let ((next-args (rest args)))
               (if (string-equal (subseq lexem 0 1) "d")
                   (values (make-delim :pattern (subseq lexem 1)))
                   (switch (lexem :test #'string-equal)               
                     ("l" (values (make-regular-token :form (first next-args))
                                  (rest next-args)))
                     ("nl" (values (make-newline :conditional? nil)
                                   next-args))
                     ("cnl" (values (make-newline :conditional? t)
                                    next-args))
                     (t (values (make-regular-token :form (first args))))))))
           (%parse (args tokens)
             (if (not args)
                 (values tokens nil)
                 (aif (maybe-lexem? (first args))
                      (if (and upto (string-equal it upto))
                          (values tokens args)
                          (progn 
                            (multiple-value-bind (token rest-args)
                                (%switch it args))
                            ))))))))

(defun parse-dbp-args (args)
  (labels ((%parse (args parsed)
             (if (not args)
                 (values parsed nil)
                 (aif (maybe-lexem? (first args))
                      (progn (switch (it :test #'string-equal)
                               ("p>" (multiple-value-bind (res rest-args)
                                         (parse-args args :upto "m>")
                                       (setf (parsed-prefix parsed) res)
                                       (%parse rest-args parsed)))
                               ("m>" (multiple-value-bind (res rest-args)
                                         (parse-args args)
                                       (setf (parsed-msg parsed) res)
                                       (%parse rest-args parsed)))))
                      (values parsed args)))))
    (%parse cluses parsed)))
